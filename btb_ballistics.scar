
local modID = '23d6cdb82724460dbcb21e1a9162e473'
local modIDlength = string.len(modID)

-- TODO: More criticals (Brew up, kill gunner, sturmtiger abandon)
-- TODO: AP shells (weapons done: usf at, pak40, pak43, stug-g, elefant)
-- TODO: Fix crew shock for heavy tanks
-- TODO: Improve visuals for heavily angled hits (take angle of attack depending on projectile position, not just heading)

local ballistics_settings = {
	["aef_57mm_at_gun"] = {
		160,
		{160, 160},
		{140, 125, 115},
		{0, 66},
		{-1, 30, -1}
	},
	["aef_57mm_at_gun_sabot_round"] = {
		160,
		{160, 160},
		{140*1.5, 125*1.5, 115*1.5},
		{0, 66},
		{-1, 30, -1}
	},
	["aef_57mm_at_gun_take_aim"] = {
		160,
		{160, 160},
		{140, 125, 115},
		{0, 66+6},
		{-1, 30+6, -1}
	},
	["aef_m9_bazooka_rocket"] = {
		100,
		{100, 100},
		{130, 120, 110},
		{0, 39},
		{-1, -1, -1}
	},
	["aef_m10_ap_round"] = {
		160,
		{160, 160},
		{250, 225, 200},
		{0, 45},
		{0, 28, 45}
	},
	["aef_m10_tank_shell_mp"] = {
		160,
		{160, 160},
		{180, 160, 140},
		{0, 45},
		{0, 28, 45}
	},
	["aef_m36_m10_ap_round"] = {
		240,
		{240, 240},
		{280, 250, 220},
		{0, 51},
		{0, 30, 51}
	},
	["aef_m36_90mm"] = {
		220,
		{220, 220},
		{200, 180, 160},
		{0, 51},
		{0, 30, 51}
	},
	["stuart_mp"] = {
		60,
		{60, 60},
		{100, 80, 60},
		{0, 44},
		{8, 15, 33}
	},
	["aef_76mm_high_velocity_tank_shell_mp"] = { -- used in soviet and usf sherman weapons, stats match
		160,
		{160, 160},
		{140, 130, 120},
		{0, 50},
		{0, 22.5, 50}
	},
	["aef_76mm_high_velocity_tank_shell_e8_mp"] = {
		160,
		{160, 160},
		{175, 165, 155},
		{0, 44},
		{0, 20, 44}
	},
	["aef_76mm_high_velocity_tank_shell_he_mp"] = {
		80,
		{80, 80},
		{50, 35, 15},
		{0, 44},
		{0, 20, 44}
	},
	["aef_75mm_high_velocity_tank_shell_he_mp"] = {
		160,
		{160, 160},
		{25, 25, 25},
		{0, 44},
		{0, 20, 44}
	},
	["aef_75mm_tank_shell_mp"] = {
		160,
		{160, 160},
		{120, 100, 80},
		{0, 44},
		{0, 20, 44}
	},
	["aef_105mm_sherman_tank_shell_mp"] = {
		160,
		{160, 160},
		{35, 35, 35},
		{0, 50},
		{-1, -1, -1}
	},
	["m8a1_hmc_he_75mm_shell_mp"] = {
		120,
		{120, 120},
		{40, 40, 40},
		{10, 60},
		{10, 35, 60}
	},
	["aef_m8a1_hmc_he_75mm_shell_angle_distance_fire_mp"] = { -- used in victor target and normal weapon, stats match except range
		120,
		{120, 120},
		{75, 75, 75},
		{10, 80},
		{10, 35, 60}
	},
	["pak40_75mm"] = {
		80,
		{80, 80},
		{170, 170, 170},
		{0, 63},
		{10, 25, 60}
	},
	["pak40_75mm_mp"] = { -- used in an OKW pak40 (unused ingame), stats match
		160,
		{160, 160},
		{210, 180, 120},
		{0, 63},
		{10, 25, 60}
	},
	--[[["pak40_75mm_critical_mp"] = { -- used in an OKW pak40 (unused ingame), stats match
		160,
		{160, 160},
		{420, 400, 380},
		{0, 63},
		{10, 25, 60}
	},]]
	["pak_88mm_pak43_shell_mp"] = {
		320,
		{320, 320},
		{380, 340, 300},
		{5, 83},
		{-1, -1, -1}
	},
	--[[["pak_88mm_pak43_shell_critical_mp"] = {
		320,
		{320, 320},
		{760, 680, 600},
		{5, 100},
		{-1, -1, -1}
	},]]
	["panzerschreck"] = { -- used in sp folder destroy engine and normal sp weapon, stats match
		150,
		{150, 150},
		{170, 170, 170},
		{0, 44},
		{-1, -1, -1}
	},
	["panzerschreck_mp"] = { -- used for ostheer, okw and sp rangers panzerschreks, stats match
		150,
		{150, 150},
		{180, 170, 160},
		{0, 39},
		{0, 17.5, 39}
	},
	["50mm_puma_gun_projectile"] = {
		120,
		{120, 120},
		{160, 120, 80},
		{0, 53},
		{10, 30, 53}
	},
	--[[["50mm_puma_gun_projectile_critical"] = {
		120,
		{120, 120},
		{320, 240, 160},
		{0, 80},
		{0, 17.5, 39}
	},]]
	['sdkfz_234_kwk39_5cm_shell_mp'] = { -- OKW Puma
		120,
		{120, 120},
		{160, 120, 80},
		{0, 53},
		{10, 30, 53}
	},
	["pak_88mm_shell_elefant_mp"] = {
		300,
		{300, 300},
		{440, 400, 360},
		{0, 110},
		{-1, -1, -1}
	},
	["pak_88mm_shell_elefant_critical_mp"] = {
		300,
		{300, 300},
		{880, 800, 720},
		{0, 110},
		{-1, -1, -1}
	},
	["kwk_42_75mm_panther_tank_gun"] = {
		120,
		{120, 120},
		{260, 240, 220},
		{0, 44},
		{-1, -1, -1}
	},
	["kwk_42_75mm_panther_tank_gun_mp"] = { -- used in ostheer panther, and two command panthers (okw and ostheer), stats match
		160,
		{160, 160},
		{260, 240, 220},
		{0, 55},
		{0, 25, 55}
	},
	["kwk_40_75mm_panzeriv_tank_gun_wg_mp"] = { -- used in ostheer and okw pzivs, stats match
		160,
		{160, 160},
		{120, 110, 100},
		{0, 44},
		{-1, -1, -1}
	},
	["kwk37_panzeriv_stubby_mp"] = {
		80,
		{80, 80},
		{55, 50, 45},
		{0, 44},
		{-1, -1, -1}
	},
	["pak_88mm_shell"] = { -- used in ostheer sp tigers (unchecked)
		160,
		{160, 160},
		{220, 200, 180},
		{0, 44},
		{-1, -1, -1}
	},
	["pak_88mm_shell_mp"] = { -- used in normal and sp_mp tiger, stats match
		160,
		{160, 160},
		{220, 200, 180},
		{0, 44},
		{-1, -1, -1}
	},
	["stug_75mm_mp"] = {
		160,
		{160, 160},
		{130, 120, 110},
		{0, 55},
		{-1, -1, -1}
	},
	--[[["stug_75mm_critical_mp"] = {
		160,
		{160, 160},
		{280, 280, 280},
		{0, 55},
		{-1, -1, -1}
	},]]
	--[[["tiger_ace_critical"] = {
		160,
		{160, 160},
		{440, 400, 360},
		{0, 55},
		{-1, -1, -1}
	},]]
	["wg_jagdpanzer_mp"] = {
		160,
		{160, 160},
		{200, 185, 170},
		{0, 60},
		{0, 30, 60}
	},
	["kwk_40_75mm_panzeriv_tank_gun_mp"] = { -- this is unused (used in OKW stug, stats are not updated)
		160,
		{160, 160},
		{120, 110, 100},
		{0, 55},
		{-1, -1, -1}
	},
	["kwk37_panzeriv_stubby"] = { -- SP short barrel stug
		80,
		{80, 80},
		{40, 40, 40},
		{0, 50},
		{-1, -1, -1}
	},
	["kwk37_stugiii_stubby_mp"] = {
		80,
		{80, 80},
		{55, 50, 45},
		{0, 55},
		{-1, -1, -1}
	},
	["soviet_45mm_mp"] = {
		100,
		{100, 100},
		{140, 100, 70},
		{0, 66},
		{-1, -1, -1}
	},
	["soviet_76mm_at_shell"] = {
		80,
		{80, 80},
		{170, 170, 170},
		{0, 63},
		{10, 25, 60}
	},
	["soviet_76mm_at_shell_mp"] = {
		160,
		{160, 160},
		{200, 190, 130},
		{0, 63},
		{10, 25, 60}
	},
	["isu_152_shell_mp"] = {
		240,
		{240, 240},
		{260, 230, 200},
		{5, 77},
		{5, 37.5, 77}
	},
	["isu_152_shell_ap_mp"] = {
		240,
		{240, 240},
		{260, 230, 200},
		{5, 77},
		{5, 37.5, 77}
	},
	["isu_152_shell_barrage_mp"] = {
		240,
		{240, 240},
		{1000, 1000, 1000},
		{50, 110},
		{50, 75, 110}
	},
	["isu_152_shell"] = {
		270,
		{270, 270},
		{170, 170, 170},
		{0, 110},
		{-1, -1, -1}
	},
	["isu_152_shell_piercing_shot_mp"] = {
		240,
		{240, 240},
		{400, 350, 300},
		{25, 143},
		{-1, -1, -1}
	},
	["soviet_45mm_kv8_mp"] = {
		80,
		{80, 80},
		{50, 50, 50},
		{0, 44},
		{-1, -1, -1}
	},
	["soviet_kv2_direct_fire"] = {
		210,
		{210, 210},
		{200, 180, 160},
		{0, 44},
		{-1, -1, -1}
	},
	["soviet_kv2_150mm_indirect"] = {
		210,
		{210, 210},
		{200, 180, 160},
		{25, 77},
		{-1, -1, -1}
	},
	["su76_at_76mm_shell"] = {
		80,
		{80, 80},
		{160, 120, 80},
		{5, 66},
		{-1, -1, -1}
	},
	["su76_at_76mm_shell_mp"] = {
		120,
		{120, 120},
		{160, 120, 80},
		{0, 61},
		{20, 35, 60}
	},
	["d5_85mm_tank_gun"] = {
		160,
		{160, 160},
		{200, 190, 180},
		{0, 66},
		{-1, -1, -1}
	},
	["soviet_76mm_tank_shell_mp"] = { -- used for the three kv-1 weapons, stats match
		160,
		{160, 160},
		{120, 100, 80},
		{0, 44},
		{-1, -1, -1}
	},
	["t34_85_zis-s-53_85mm_t34"] = {
		160,
		{160, 160},
		{160, 140, 120},
		{0, 44},
		{-1, -1, -1}
	},
	["raketenwefer_43_88cm_mp"] = {
		160,
		{160, 160},
		{200, 190, 180},
		{0, 57},
		{0, 25, 57}
	},
	["pak44_128mm_shell_mp"] = {
		300,
		{300, 300},
		{550, 525, 500},
		{0, 94},
		{0, 42.5, 94}
	},
	["pak44_128mm_supporting_fire_shell_mp"] = {
		160,
		{160, 160},
		{550, 525, 500},
		{25, 138},
		{25, 75, 138}
	},
	["pak44_128mm_piercing_shell_mp"] = {
		300,
		{300, 300},
		{550, 525, 500},
		{0, 94},
		{0, 42.5, 94}
	},
	["kwk_42_75mm_panther_tank_gun_wg_mp"] = { -- used in a vet weapon, stats match
		160,
		{160, 160},
		{260, 240, 220},
		{0, 55},
		{0, 25, 55}
	},
	["kwk_36_88mm_shell_mp"] = {
		160,
		{160, 160},
		{220, 200, 180},
		{0, 44},
		{-1, -1, -1}
	},
	["kwk_43_88mm_shell_mp"] = { -- used in okw tiger and tiger spearhead, stats match
		240,
		{240, 240},
		{240, 220, 200},
		{0, 44},
		{0, 20, 44}
	}
}
local ballistics_vehicles = {
	-- USF
	["dodge_wc51_50cal_mp"] = {5.2, true, 4},
	["dodge_wc51_ambulance_mp"] = {3, true, 1.8},
	["dodge_wc51_mp"] = {8.4, true, 4.2},
	["dodge_wc51_mp_pathfinders"] = {8.4, true, 4.2},
	["m10_tank_destroyer_mp"] = {120, true, 57.5},
	["m20_utility_car_mp"] = {11, true, 5.5},
	["m36_tank_destroyer_mp"] = {130, true, 60},
	["m15a1_aa_halftrack_mp"] = {15, true, 10},
	["m21_mortar_halftrack_mp"] = {8.4, true, 4.2},
	["m3_halftrack_assault_mp"] = {5.4, true, 4.2},
	["m3_halftrack_mp"] = {8.4, true, 4.2},
	["m4a3e8_sherman_easy_8_mp"] = {215, true, 95},
	["m4a3_76mm_sherman_mp"] = {160, true, 80},
	["m4a3_sherman_bulldozer_mp"] = {200, true, 80},
	["m4a3_sherman_mp"] = {160, true, 80},
	["m5a1_stuart_mp"] = {80, true, 50},
	["m7b1_priest_mp"] = {60, true, 30},
	["m8a1_hmc_mp"] = {70, true, 50},
	["m8_greyhound_mp"] = {28.5, true, 14.25},
	
	-- Ostheer
	["armored_car_sdkfz_222"] = {9, true, 6},
	["armored_car_sdkfz_222_mp"] = {9, true, 6},
	["brummbar_sturmpanzer_iv_sdkfz_166"] = {225, true, 150},
	["brummbar_sturmpanzer_iv_sdkfz_166_mp"] = {260, true, 105},
	["elefant_sdkfz_184"] = {510, true, 100},
	["elefant_sdkfz_184_mp"] = {400, true, 150},
	["halftrack_sdkfz_251"] = {35, true, 25},
	["halftrack_sdkfz_251_mp"] = {9, true, 4.5},
	["mechanized_250_halftrack_grenadier_mp"] = {11, true, 5.5},
	["mechanized_250_halftrack_mp"] = {11, true, 5.5},
	["mortar_light_halftrack_250_7"] = {25, true, 12.5},
	["mortar_light_halftrack_250_7_mp"] = {11, true, 5.5},
	["sdkfz_221_light_at_halftrack"] = {11, true, 5.5},
	["opel_blitz_supply_truck_mp"] = {7, false, 5},
	["opel_blitz_truck"] = {25, false, 15},
	["ostwind_flak_panzer"] = {100, true, 70},
	["ostwind_flak_panzer_mp"] = {110, true, 55},
	["panther_sdkfz_171"] = {280, true, 110},
	["panther_sdkfz_171_mp"] = {280, true, 110},
	["panzerwerfer_sdkfz_4_1"] = {25, true, 15},
	["panzerwerfer_sdkfz_4_1_mp"] = {20, true, 10},
	["panzer_iii_mp"] = {90, true, 45},
	["panzer_iv_commander_sdkfz_161"] = {150, true, 100},
	["panzer_iv_commander_sdkfz_161_mp"] = {180, true, 90},
	["panzer_iv_sdkfz_161"] = {150, true, 100},
	["panzer_iv_sdkfz_161_mp"] = {180, true, 90},
	["panzer_iv_sdkfz_ausf1"] = {150, true, 100},
	["panzer_iv_sdkfz_ausf1_mp"] = {180, true, 90},
	["puma_east_german"] = {25, true, 12.5},
	["stug_iii_e_sdkfz_141_1"] = {170, true, 75},
	["stug_iii_e_sdkfz_141_1_commander_mp"] = {170, true, 70},
	["stug_iii_e_sdkfz_141_1_mp"] = {170, true, 70},
	["stug_iii_g_sdkfz_141_1"] = {170, true, 100},
	["stug_iii_g_sdkfz_141_1_mp"] = {170, true, 70},
	["tiger_ace_sdkfz_181_mp"] = {300, true, 180},
	["tiger_sdkfz_181"] = {340, true, 150},
	["tiger_sdkfz_181_mp"] = {300, true, 180},
	["tiger_sdkfz_181_singleplayer_mission"] = {340, true, 150},
	["tiger_sdkfz_181_tow"] = {350, true, 150},
	
	-- Soviet
	["is-2_heavy_tank"] = {220, true, 180},
	["is-2_heavy_tank_mp"] = {375, true, 205},
	["isu_152_spg"] = {310, true, 150},
	["isu_152_spg_mp"] = {310, true, 155},
	["katyusha_bm-13n"] = {30, true, 20},
	["katyusha_bm-13n_mp"] = {7, true, 5},
	["kv-1"] = {340, true, 225},
	["kv-1_commander_mp"] = {270, true, 165},
	["kv-1_mp"] = {340, true, 225},
	["kv-2"] = {340, true, 275},
	["kv-2_mp"] = {300, true, 180},
	["kv-2_tow"] = {550, true, 50},
	["kv-8"] = {340, true, 225},
	["kv-8_mp"] = {240, true, 145},
	["m3a1_scout_car"] = {25, true, 15},
	["m3a1_scout_car_mp"] = {5.4, true, 4.2},
	["m5_halftrack"] = {30, true, 20},
	["m5_halftrack_assault_mp"] = {28.5, true, 20},
	["m5_halftrack_mp"] = {28.5, true, 20},
	["sherman_soviet"] = {160, true, 80},
	["su_76m"] = {70, true, 50},
	["su_76m_mp"] = {70, true, 35},
	["su_85"] = {150, true, 100},
	["su_85_mp"] = {140, true, 70},
	["t_34_76"] = {150, true, 100},
	["t_34_76_mp"] = {150, true, 75},
	["t_34_85"] = {150, true, 100},
	["t_34_85_mp"] = {160, true, 80},
	["t_70m"] = {70, true, 50},
	["t_70m_mp"] = {70, true, 35},
	["us6_truck"] = {22, true, 12},
	["us6_truck_mp"] = {7, true, 15},
	["zis_6_transport"] = {20, true, 10},
	["zis_6_transport_mp"] = {20, true, 10},
	
	-- OKW
	["armored_car_sdkfz_222_wg_mp"] = {9, true, 6},
	["halftrack_sdkfz_251_17_flak_mp"] = {11, true, 5.5},
	["halftrack_sdkfz_251_20_ir_searchlight_mp"] = {11, true, 5.5},
	["halftrack_sdkfz_251_20_ir_searchlight_sp"] = {11, true, 5.5},
	["halftrack_sdkfz_251_mp_2"] = {9, true, 4.5},
	["halftrack_sdkfz_251_wurfrahmen_40_mp"] = {11, true, 5.5},
	["jagdpanzer_iv_sdkfz_162_mp"] = {230, true, 80},
	["jagdtiger_sdkfz_186_mp"] = {525, true, 150},
	["king_tiger_sdkfz_182_mp"] = {425, true, 225},
	["kubelwagen_type_82_mp"] = {4, true, 2},
	["ostwind_flak_panzer_west_german_mp"] = {110, true, 55},
	["panther_sdkfz_171_commander_mp"] = {280, true, 110},
	["panther_sdkfz_171_ausf_g_mp"] = {280, true, 110},
	["panzer_ii_luchs_sdkfz_123_mp"] = {55, true, 35},
	["panzer_iv_sdkfz_ausf_j_buildable_mp"] = {160, true, 80},
	["panzer_iv_sdkfz_ausf_j_mp"] = {160, true, 80},
	["puma_sdkfz_234_mp"] = {25, true, 12.5},
	["sturmtiger_606_38cm_rw_61_mp"] = {220, true, 110},
	["sws_halftrack_mp"] = {5, true, 4.5},
	["sws_halftrack_sp"] = {11, true, 5.5},
}

local ballistics_criticals = {
	['damage_engine'] = BP_GetCriticalBlueprint('vehicle_damage_engine'),
	['destroy_engine'] = BP_GetCriticalBlueprint('vehicle_destroy_engine'),
	['destroy_maingun'] = BP_GetCriticalBlueprint('vehicle_destroy_maingun'),
	['abandon'] = BP_GetCriticalBlueprint('vehicle_abandon')
}

-- Helper functions
local function Util_CreateLocString(text)
	local tmpstr = LOC(text)
	tmpstr[1] = text
	return tmpstr
end
local function normalizeVector(pos)
	local length = math.sqrt(pos.x*pos.x + pos.y*pos.y + pos.z*pos.z)
	return World_Pos(pos.x / length, pos.y / length, pos.z / length)
end
local function removeModID(str)
	if string.sub(str, 1, modIDlength+1) == modID..':' then
		return string.sub(str, modIDlength+2)
	end
	return str
end

local projectileData = {}
local function cleanupProjectileData()
	local projectileDataCpy = {}
	for i,v in pairs(projectileData) do
		if World_GetGameTime() - v[1] < 10 then
			table.insert(projectileDataCpy, v)
		end
	end
	projectileData = projectileDataCpy
end
local function applyDamage(shootingEntity, target, hitPosition, amount, applyCriticals, showKicker, hitType, slope)
	if showKicker then
		local color
		if hitType == 1 then
			color = {0, 185, 0}
		elseif hitType == 2 then
			color = {255, 190, 0}
		else
			color = {255, 0, 0}
		end
		for p=1,World_GetPlayerCount() do
			UI_CreateColouredPositionKickerMessage(World_GetPlayerAt(p), hitPosition, Util_CreateLocString(math.ceil(amount)), color[1], color[2], color[3], 50)
		end
	end
	
	local newHealth = math.max(0, Entity_GetHealthPercentage(target) - amount/Entity_GetHealthMax(target))
	
	-- Apply veterancy
	if shootingEntity then
		if not World_OwnsEntity(target) and not World_OwnsEntity(shootingEntity) and Player_GetRelationship(Entity_GetPlayerOwner(shootingEntity), Entity_GetPlayerOwner(target)) == R_ENEMY then
			local targetSquad = Entity_GetSquad(target)
			local shootingEntitySquad =  Entity_GetSquad(shootingEntity)
			if targetSquad and shootingEntitySquad then
				local experienceGranted = amount*Squad_GetHealthMax(targetSquad)/500*(1+Squad_GetVeterancyRank(targetSquad)*0.2)
				if newHealth == 0 then
					experienceGranted = experienceGranted * 2
				else
					Squad_IncreaseVeterancyExperience(
						targetSquad,
						amount*Squad_GetHealthMax(shootingEntitySquad)/500*(1+Squad_GetVeterancyRank(shootingEntitySquad)*0.2) / 10,
						false,
						true
					)
				end
				Squad_IncreaseVeterancyExperience(
					shootingEntitySquad,
					experienceGranted,
					false,
					true
				)
			end
		end
		Misc_DoWeaponHitEffectOnEntity(target, hitPosition, Entity_GetWeaponBlueprint(shootingEntity, 0), true)
	end
	
	Entity_SetHealth(target, newHealth)
	
	-- Apply criticals or kill the target
	local rand = World_GetRand(0, 1000)
	if not applyCriticals or World_OwnsEntity(target) then
		if newHealth == 0 then
			Entity_Kill(target)
		end
	else
		if newHealth == 0 then
			if rand <= 20 then
				Entity_ApplyCritical(target, ballistics_criticals['abandon'], 1)
			else
				Entity_Kill(target)
			end
		elseif newHealth <= 0.5 then
			if rand <= 2 then
				if not Entity_HasCritical(target, ballistics_criticals['damage_engine']) then
					Entity_ApplyCritical(target, ballistics_criticals['damage_engine'], 1)
				end
			end
		elseif newHealth <= 0.15 then
			if rand <= 100 then
				if not Entity_HasCritical(target, ballistics_criticals['destroy_engine']) then
					Entity_ApplyCritical(target, ballistics_criticals['destroy_engine'], 0.5)
				end
			elseif rand <= 200 then
				if not Entity_HasCritical(target, ballistics_criticals['destroy_maingun']) then
					Entity_ApplyCritical(target, ballistics_criticals['destroy_maingun'], 0.5)
				end
			elseif rand <= 600 then
				if not Entity_HasCritical(target, ballistics_criticals['damage_engine']) then
					Entity_ApplyCritical(target, ballistics_criticals['damage_engine'], 0.5)
				end
			end
		end
	end
end
function BtB_ProjectileFired(projectile, shootingEntity, target)
	local projectileName = removeModID(BP_GetName(Entity_GetBlueprint(projectile)))
	--CustomDebug.Print('Projectile fired: '..projectileName)
	
	--[[if scartype(target) == ST_ENTITY then
		CustomDebug.Print('  Target: '..removeModID(BP_GetName(Entity_GetBlueprint(target))))
	else
		CustomDebug.Print('  Target: {'..string.format('%.0f, %.0f, %.0f', target.x, target.y, target.z)..'}')
	end]]
	
	if not projectile or not ballistics_settings[projectileName] or not target then
		return
	end
	cleanupProjectileData()
	
	table.insert(projectileData, {
		World_GetGameTime(),
		Entity_GetGameID(projectile),
		Entity_GetPosition(projectile)--[[,
		projectile,
		Entity_GetGameID(shootingEntity),
		shootingEntity,
		Entity_GetGameID(target),
		target,]]
	})
	
	--CustomDebug.Print('  Cached projectile data')
end
function BtB_ProjectileLanded(projectile, shootingEntity, target)
	local projectileName = removeModID(BP_GetName(Entity_GetBlueprint(projectile)))
	--CustomDebug.Print('Projectile landed: '..projectileName)
	
	if not projectile or not target then
		return
	end
	
	local hitPosition = Entity_GetPosition(projectile)
	
	local weaponSettings = ballistics_settings[projectileName]
	if not weaponSettings then
		return
	end
	
	-- Extra splats for ballistic weaponry
	--if scartype(target) == ST_SCARPOS then
	--	Misc_DoWeaponHitEffectOnPosition(Util_GetRandomPosition(hitPosition, 0.65), BP_GetWeaponBlueprint('panzerschreck_atw_mp'), true)
	--end
	
	local weaponDamage = weaponSettings[1]
	
	local projectileIndex = nil
	local projectileGameID = Entity_GetGameID(projectile)
	for i,v in pairs(projectileData) do
		if v[2] == projectileGameID then
			projectileIndex = i
			break
		end
	end
	
	if projectileIndex then
		--CustomDebug.Print('  Projectile data found')
		--[[if scartype(target) == ST_ENTITY then
			CustomDebug.Print('  Target: '..removeModID(BP_GetName(Entity_GetBlueprint(target))))
		else
			CustomDebug.Print('  Target: {'..string.format('%.0f, %.0f, %.0f', target.x, target.y, target.z)..'}')
		end]]
		local origin = projectileData[projectileIndex]
		local originPosition = origin[3]
		local projectileHeading = World_Pos(originPosition.x - hitPosition.x, originPosition.y - hitPosition.y, originPosition.z - hitPosition.z)
		local travelDistance = math.sqrt(projectileHeading.x^2 + projectileHeading.y^2 + projectileHeading.z^2)
		if travelDistance < 8 and shootingEntity then
			originPosition = Entity_GetPosition(shootingEntity)
			projectileHeading = World_Pos(originPosition.x - hitPosition.x, originPosition.y - hitPosition.y, originPosition.z - hitPosition.z)
			travelDistance = math.sqrt(projectileHeading.x^2 + projectileHeading.y^2 + projectileHeading.z^2)
		end
		projectileHeading = normalizeVector(projectileHeading)
		if scartype(target) ~= ST_ENTITY then
			--[[CustomDebug.Print('  Height at location: '..World_GetHeightAt(target.x, target.z))
			CustomDebug.Print('  Height difference: '..math.abs(World_GetHeightAt(target.x, target.z) - target.y))
			if math.abs(World_GetHeightAt(target.x, target.z) - target.y) <= 0.1 then
				return
			end]]
			local addedHeadingHitPosition = World_Pos(hitPosition.x + projectileHeading.x*2, hitPosition.y + projectileHeading.y*2, hitPosition.z + projectileHeading.z*2)
			--CustomDebug.Print('  ## Looking for closest target')
			if shootingEntity and not World_OwnsEntity(shootingEntity) then
				--CustomDebug.Print('    has shooting entity')
				local owner = Entity_GetPlayerOwner(shootingEntity)
				if owner then
					--CustomDebug.Print('    has owner')
					local tmpsg = SGroup_CreateIfNotFound('ballistics_tmp')
					World_GetSquadsNearPoint(owner, tmpsg, hitPosition, 2, OT_Enemy)
					local targetCount = SGroup_CountSpawned(tmpsg)
					if targetCount <= 0 then
						World_GetSquadsNearPoint(owner, tmpsg, addedHeadingHitPosition, 2, OT_Enemy)
						targetCount = SGroup_CountSpawned(tmpsg)
					end
					if targetCount > 0 then
						for i=1,targetCount do
							local sq = SGroup_GetSpawnedSquadAt(tmpsg, i)
							if Squad_Count(sq) == 1 then
								local entity = Squad_EntityAt(sq, 0)
								if Entity_IsVehicle(entity) then
									--CustomDebug.Print('    got enemy target!')
									target = entity
									break
								end
							end
						end
					end
					SGroup_Destroy(tmpsg)
					
					if scartype(target) ~= ST_ENTITY then
						local tmpeg = EGroup_CreateIfNotFound('ballistics_tmp')
						World_GetEntitiesNearPoint(owner, tmpeg, hitPosition, 2, OT_Enemy)
						local targetCount = EGroup_CountSpawned(tmpeg)
						if targetCount <= 0 then
							World_GetEntitiesNearPoint(owner, tmpeg, addedHeadingHitPosition, 2, OT_Enemy)
							targetCount = EGroup_CountSpawned(tmpeg)
						end
						if targetCount > 0 then
							target = EGroup_GetSpawnedEntityAt(tmpeg, 1)
						end
						EGroup_Destroy(tmpeg)
					end
				end
			end
			if scartype(target) ~= ST_ENTITY then
				local tmpeg = EGroup_CreateIfNotFound('ballistics_tmp')
				World_GetNeutralEntitiesNearPoint(tmpeg, hitPosition, 2)
				local targetCount = EGroup_CountSpawned(tmpeg)
				if targetCount <= 0 then
					World_GetNeutralEntitiesNearPoint(tmpeg, addedHeadingHitPosition, 2)
					targetCount = EGroup_CountSpawned(tmpeg)
				end
				if targetCount > 0 then
					target = EGroup_GetSpawnedEntityAt(tmpeg, 1)
				end
				EGroup_Destroy(tmpeg)
			end
		end
		if scartype(target) ~= ST_ENTITY then
			return
		end
		
		local targetName = removeModID(BP_GetName(Entity_GetBlueprint(target)))
		--CustomDebug.Print('  Final Target: '..targetName)
		
		local vehicleSettings = ballistics_vehicles[targetName]
		if vehicleSettings then
			local heading = normalizeVector(Entity_GetHeading(target))
			
			local angleOfAttack =
				math.acos((projectileHeading.x*heading.x + projectileHeading.y*heading.y + projectileHeading.z*heading.z)
				/(
					math.sqrt(projectileHeading.x^2 + projectileHeading.y^2 + projectileHeading.z^2)*
					math.sqrt(heading.x^2 + heading.y^2 + heading.z^2))
				)
				*180/3.14159
			
			local vehicleArmor
			local slope
			local damageMultiplier
			local hitType
			
			local frontAndRearAngle = 45
			if
					   (angleOfAttack > -frontAndRearAngle and angleOfAttack < frontAndRearAngle)
					or (angleOfAttack > 360 - frontAndRearAngle or angleOfAttack < -(360 - frontAndRearAngle))
						then
				if angleOfAttack > -frontAndRearAngle and angleOfAttack < frontAndRearAngle then
					slope = math.abs(angleOfAttack)
				else
					slope = 360 - math.abs(angleOfAttack)
				end
				damageMultiplier = 1
				slope = 0.2 + slope / frontAndRearAngle * 0.8
				hitType = 1
				vehicleArmor = vehicleSettings[1]
			elseif
					   (angleOfAttack > 180 - frontAndRearAngle and angleOfAttack < 180 + frontAndRearAngle)
					or (angleOfAttack > -(180 - frontAndRearAngle) and angleOfAttack < -(180 + frontAndRearAngle))
						then
				damageMultiplier = 1.275
				slope = 0.3 + math.abs(math.abs(angleOfAttack) - 180) / frontAndRearAngle * 0.7
				hitType = 3
				if vehicleSettings[2] then
					vehicleArmor = vehicleSettings[3]
				else
					vehicleArmor = vehicleSettings[1]
				end
			else
				if math.abs(angleOfAttack) > 180 then
					slope = math.abs(math.abs(angleOfAttack) - 270)
				else
					slope = math.abs(math.abs(angleOfAttack) - 90)
				end
				damageMultiplier = 1.175
				slope = slope / (90 - frontAndRearAngle)
				hitType = 2
				if vehicleSettings[2] then
					vehicleArmor = (vehicleSettings[3] + vehicleSettings[1]) / 2
				else
					vehicleArmor = vehicleSettings[1]
				end
			end
			slope = 1 - slope
			
			local weaponRangeTable = weaponSettings[5]
			if weaponRangeTable[1] == -1 then
				weaponRangeTable[1] = weaponSettings[4][1]
			end
			if weaponRangeTable[2] == -1 then
				weaponRangeTable[2] = (weaponSettings[4][2] - weaponSettings[4][1]) / 2
			end
			if weaponRangeTable[3] == -1 then
				weaponRangeTable[3] = weaponSettings[4][2]
			end
			local weaponPenetration
			if travelDistance <= weaponRangeTable[1] then
				weaponPenetration = weaponSettings[3][1]
			elseif travelDistance <= weaponRangeTable[2] then
				weaponPenetration = weaponSettings[3][1] + (weaponSettings[3][2] - weaponSettings[3][1])*(travelDistance - weaponRangeTable[1])/(weaponRangeTable[2] - weaponRangeTable[1])
			elseif travelDistance <= weaponRangeTable[3] then
				weaponPenetration = weaponSettings[3][2] + (weaponSettings[3][3] - weaponSettings[3][2])*(travelDistance - weaponRangeTable[2])/(weaponRangeTable[3] - weaponRangeTable[2])
			else
				weaponPenetration = weaponSettings[3][3]
			end
			
			slope = math.min(1, slope + math.max(0, weaponPenetration/vehicleArmor/2 - 1)) -- slope is not as important if penetration value is larger than vehicle armor
			
			local penetrationChance = 1000 * math.max(0, weaponPenetration*1.15/vehicleArmor) * (0.9 + slope*0.35)
			if Entity_GetHealthMax(target) > 400 then
				weaponDamage = weaponDamage * (1 + 0.175 * math.max(0, math.min(1, (Entity_GetHealthMax(target) - 400)/350)) * math.max(0, math.min(1, weaponPenetration/vehicleArmor)))
			end
			--[[if shootingEntity then
				local shootingEntitySquad = Entity_GetSquad(shootingEntity)
				if shootingEntitySquad then
					penetrationChance = penetrationChance * (1 + Squad_GetVeterancyRank(shootingEntitySquad)*0.05)
				end
			end]]
			
			--[[CustomDebug.Print('Weapon penetration: '..string.format('%.0f', weaponPenetration))
			CustomDebug.Print('Vehicle armor: '..string.format('%.0f', vehicleArmor))
			CustomDebug.Print('Penetration chance: '..string.format('%.1f', penetrationChance/10))]]
			
			local penetrated = World_GetRand(0, 1000) <= penetrationChance
			if penetrated then
				local appliedDamage = math.ceil(math.min(weaponDamage, math.ceil(weaponDamage) * (slope*0.45 + 0.6) * damageMultiplier) / 5) * 5
				applyDamage(shootingEntity, target, hitPosition, appliedDamage, true, true, hitType, slope)
			else
				--[[for p=1,World_GetPlayerCount() do
					UI_CreateColouredPositionKickerMessage(World_GetPlayerAt(p), hitPosition, Util_CreateLocString('Shot bounced. '..string.format('%.0f', slope*100)..'% slope bonus'), 0, 100, 200, 50)
				end]]
			end
		else
			applyDamage(shootingEntity, target, hitPosition, weaponDamage, false, false, nil, nil)
		end
		
		table.remove(projectileData, projectileIndex)
	end
	cleanupProjectileData()
end

Rule_RemoveGlobalEvent(BtB_ProjectileFired)
Rule_RemoveGlobalEvent(BtB_ProjectileLanded)
Rule_AddGlobalEvent(BtB_ProjectileFired, GE_ProjectileFired)
Rule_AddGlobalEvent(BtB_ProjectileLanded, GE_ProjectileLanded)
