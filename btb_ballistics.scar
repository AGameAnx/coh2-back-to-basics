
-- TODO: All veterancy multipliers
-- TODO: All abilities that modify receieved penetration & damage
-- TODO: More criticals (Brew up, kill gunner, sturmtiger abandon)

local function Util_CreateLocString(text)
	local tmpstr = LOC(text)
	tmpstr[1] = text
	return tmpstr
end

local function BtB_Ballistics_FindClosestHitTarget(hitPosition, projectileHeading, shootingEntity)
	local target = nil
	local searchRadius = 2.25
	local addedHeadingHitPosition = World_Pos(
		hitPosition.x + projectileHeading.x*searchRadius*0.65,
		hitPosition.y + projectileHeading.y*searchRadius*0.65,
		hitPosition.z + projectileHeading.z*searchRadius*0.65
	)
	if shootingEntity and not World_OwnsEntity(shootingEntity) then
		local owner = Entity_GetPlayerOwner(shootingEntity)
		if owner then
			local tmpsg = SGroup_CreateIfNotFound('btb_ballistics_tmp')
			World_GetSquadsNearPoint(owner, tmpsg, hitPosition, searchRadius, OT_Enemy)
			local targetCount = SGroup_CountSpawned(tmpsg)
			if targetCount <= 0 then
				World_GetSquadsNearPoint(owner, tmpsg, addedHeadingHitPosition, searchRadius, OT_Enemy)
				targetCount = SGroup_CountSpawned(tmpsg)
			end
			if targetCount > 0 then
				local minDistanceSq = nil
				for i=1,targetCount do
					local sq = SGroup_GetSpawnedSquadAt(tmpsg, i)
					if Squad_Count(sq) == 1 then
						local entity = Squad_EntityAt(sq, 0)
						if Entity_IsVehicle(entity) then
							local distanceSq = World_DistanceSquaredPointToPoint(Entity_GetPosition(entity), hitPosition)
							if minDistanceSq == nil or distanceSq < minDistanceSq then
								minDistanceSq = distanceSq
								target = entity
							end
						end
					end
				end
			end
			SGroup_Destroy(tmpsg)
			
			if scartype(target) ~= ST_ENTITY then
				local tmpeg = EGroup_CreateIfNotFound('btb_ballistics_tmp')
				World_GetEntitiesNearPoint(owner, tmpeg, hitPosition, searchRadius, OT_Enemy)
				local targetCount = EGroup_CountSpawned(tmpeg)
				if targetCount <= 0 then
					World_GetEntitiesNearPoint(owner, tmpeg, addedHeadingHitPosition, searchRadius, OT_Enemy)
					targetCount = EGroup_CountSpawned(tmpeg)
				end
				if targetCount > 0 then
					local minDistanceSq = nil
					for i=1,targetCount do
						local entity = EGroup_GetSpawnedEntityAt(tmpeg, i)
						local distanceSq = World_DistanceSquaredPointToPoint(Entity_GetPosition(entity), hitPosition)
						if minDistanceSq == nil or distanceSq < minDistanceSq then
							minDistanceSq = distanceSq
							target = entity
						end
					end
				end
				EGroup_Destroy(tmpeg)
			end
		end
	end
	if scartype(target) ~= ST_ENTITY then
		local tmpeg = EGroup_CreateIfNotFound('btb_ballistics_tmp')
		World_GetNeutralEntitiesNearPoint(tmpeg, hitPosition, searchRadius)
		local targetCount = EGroup_CountSpawned(tmpeg)
		if targetCount <= 0 then
			World_GetNeutralEntitiesNearPoint(tmpeg, addedHeadingHitPosition, searchRadius)
			targetCount = EGroup_CountSpawned(tmpeg)
		end
		if targetCount > 0 then
			local minDistanceSq = nil
			for i=1,targetCount do
				local entity = EGroup_GetSpawnedEntityAt(tmpeg, i)
				local distanceSq = World_DistanceSquaredPointToPoint(Entity_GetPosition(entity), hitPosition)
				if minDistanceSq == nil or distanceSq < minDistanceSq then
					minDistanceSq = distanceSq
					target = entity
				end
			end
		end
		EGroup_Destroy(tmpeg)
	end
	return target
end
local function BtB_Ballistics_ApplyDamage(shootingEntity, target, hitPosition, amount, applyCriticals, showKicker, hitType, slope)
	if showKicker then
		local color
		if hitType == 1 then
			color = {0, 185, 0}
		elseif hitType == 2 then
			color = {255, 190, 0}
		else
			color = {255, 0, 0}
		end
		for p=1,World_GetPlayerCount() do -- TODO: Display this for one player only?
			UI_CreateColouredPositionKickerMessage(World_GetPlayerAt(p), hitPosition, Util_CreateLocString(math.ceil(amount)), color[1], color[2], color[3], 50)
		end
	end
	
	local newHealth = math.max(0, Entity_GetHealthPercentage(target) - amount/Entity_GetHealthMax(target))
	
	-- Apply veterancy
	if shootingEntity then
		if not World_OwnsEntity(target) and not World_OwnsEntity(shootingEntity) and Player_GetRelationship(Entity_GetPlayerOwner(shootingEntity), Entity_GetPlayerOwner(target)) == R_ENEMY then
			local targetSquad = Entity_GetSquad(target)
			local shootingEntitySquad =  Entity_GetSquad(shootingEntity)
			if targetSquad and shootingEntitySquad then
				local experienceGranted = amount*Squad_GetHealthMax(targetSquad)/500*(1+Squad_GetVeterancyRank(targetSquad)*0.2)
				if newHealth == 0 then
					experienceGranted = experienceGranted * 2
				else
					Squad_IncreaseVeterancyExperience(
						targetSquad,
						amount*Squad_GetHealthMax(shootingEntitySquad)/500*(1+Squad_GetVeterancyRank(shootingEntitySquad)*0.2) / 10,
						false,
						true
					)
				end
				Squad_IncreaseVeterancyExperience(
					shootingEntitySquad,
					experienceGranted,
					false,
					true
				)
			end
		end
		Misc_DoWeaponHitEffectOnEntity(target, hitPosition, Entity_GetWeaponBlueprint(shootingEntity, 0), true)
	end
	
	Entity_SetHealth(target, newHealth)
	
	-- Apply criticals or kill the target
	local rand = World_GetRand(0, 1000)
	if not applyCriticals or World_OwnsEntity(target) then
		if newHealth == 0 then
			Entity_Kill(target)
		end
	else
		if newHealth == 0 then
			if rand <= 20 then
				Entity_ApplyCritical(target, btb_ballistics_criticals['abandon'], 1)
			else
				Entity_Kill(target)
			end
		elseif newHealth <= 0.5 then
			if rand <= 2 then
				if not Entity_HasCritical(target, btb_ballistics_criticals['damage_engine']) then
					Entity_ApplyCritical(target, btb_ballistics_criticals['damage_engine'], 1)
				end
			end
		elseif newHealth <= 0.15 then
			if rand <= 100 then
				if not Entity_HasCritical(target, btb_ballistics_criticals['destroy_engine']) then
					Entity_ApplyCritical(target, btb_ballistics_criticals['destroy_engine'], 0.5)
				end
			elseif rand <= 200 then
				if not Entity_HasCritical(target, btb_ballistics_criticals['destroy_maingun']) then
					Entity_ApplyCritical(target, btb_ballistics_criticals['destroy_maingun'], 0.5)
				end
			elseif rand <= 600 then
				if not Entity_HasCritical(target, btb_ballistics_criticals['damage_engine']) then
					Entity_ApplyCritical(target, btb_ballistics_criticals['damage_engine'], 0.5)
				end
			end
		end
	end
end

local function BtB_Ballistics_GetHitData(target, projectileHeading, vehicleSettings)
	local slope, damageMultiplier, vehicleArmor, hitType
	local frontAndRearAngle = 45
	local targetHeading = Entity_GetHeading(target)
	
	local angleOfAttack =
		math.acos((-projectileHeading.x*targetHeading.x - projectileHeading.y*targetHeading.y - projectileHeading.z*targetHeading.z)
		/(
			math.sqrt(projectileHeading.x^2 + projectileHeading.y^2 + projectileHeading.z^2)*
			math.sqrt(targetHeading.x^2 + targetHeading.y^2 + targetHeading.z^2))
		)*180/3.14159
	
	if
			   (angleOfAttack > -frontAndRearAngle and angleOfAttack < frontAndRearAngle)
			or (angleOfAttack > 360 - frontAndRearAngle or angleOfAttack < -(360 - frontAndRearAngle))
				then
		if angleOfAttack > -frontAndRearAngle and angleOfAttack < frontAndRearAngle then
			slope = math.abs(angleOfAttack)
		else
			slope = 360 - math.abs(angleOfAttack)
		end
		damageMultiplier = 1
		slope = 0.2 + slope / frontAndRearAngle * 0.8
		hitType = 1
		vehicleArmor = vehicleSettings[1]
	elseif
			   (angleOfAttack > 180 - frontAndRearAngle and angleOfAttack < 180 + frontAndRearAngle)
			or (angleOfAttack > -(180 - frontAndRearAngle) and angleOfAttack < -(180 + frontAndRearAngle))
				then
		damageMultiplier = 1.275
		slope = 0.3 + math.abs(math.abs(angleOfAttack) - 180) / frontAndRearAngle * 0.7
		hitType = 3
		if vehicleSettings[2] then
			vehicleArmor = vehicleSettings[3]
		else
			vehicleArmor = vehicleSettings[1]
		end
	else
		if math.abs(angleOfAttack) > 180 then
			slope = math.abs(math.abs(angleOfAttack) - 270)
		else
			slope = math.abs(math.abs(angleOfAttack) - 90)
		end
		damageMultiplier = 1.175
		slope = slope / (90 - frontAndRearAngle)
		hitType = 2
		if vehicleSettings[2] then
			vehicleArmor = (vehicleSettings[3] + vehicleSettings[1]) / 2
		else
			vehicleArmor = vehicleSettings[1]
		end
	end
	slope = 1 - slope
	
	return slope, damageMultiplier, vehicleArmor, hitType
end
local function BtB_Ballistics_GetWeaponStatistics(weaponSettings, originPosition, hitPosition, target)
	local weaponPenetration
	local weaponDamage = weaponSettings[1]
	
	local weaponRangeTable = weaponSettings[5]
	if weaponRangeTable[1] == -1 then
		weaponRangeTable[1] = weaponSettings[4][1]
	end
	if weaponRangeTable[2] == -1 then
		weaponRangeTable[2] = (weaponSettings[4][2] - weaponSettings[4][1])/2
	end
	if weaponRangeTable[3] == -1 then
		weaponRangeTable[3] = weaponSettings[4][2]
	end
	
	local travelVector = World_Pos(originPosition.x - hitPosition.x, originPosition.y - hitPosition.y, originPosition.z - hitPosition.z)
	local travelDistance = math.sqrt(travelVector.x^2 + travelVector.y^2 + travelVector.z^2)
	
	if travelDistance <= weaponRangeTable[1] then
		weaponPenetration = weaponSettings[3][1]
	elseif travelDistance <= weaponRangeTable[2] then
		weaponPenetration = weaponSettings[3][1] + (weaponSettings[3][2] - weaponSettings[3][1])*(travelDistance - weaponRangeTable[1])/(weaponRangeTable[2] - weaponRangeTable[1])
	elseif travelDistance <= weaponRangeTable[3] then
		weaponPenetration = weaponSettings[3][2] + (weaponSettings[3][3] - weaponSettings[3][2])*(travelDistance - weaponRangeTable[2])/(weaponRangeTable[3] - weaponRangeTable[2])
	else
		weaponPenetration = weaponSettings[3][3]
	end
	
	return weaponDamage, weaponPenetration
end
local function BtB_Ballistics_ApplyWeaponModifiers(weaponDamage, weaponPenetration, shootingEntity, target)
	if shootingEntity then
		local veterancySettings = btb_ballistics_veterancySettings[removeModID(BP_GetName(Entity_GetBlueprint(shootingEntity)))]
		if veterancySettings then
			local shootingEntitySquad = Entity_GetSquad(shootingEntity)
			if shootingEntitySquad then
				local shootingEntitySquadVeterancy = Squad_GetVeterancyRank(shootingEntitySquad)
				for i,v in pairs(veterancySettings) do
					if i <= shootingEntitySquadVeterancy then
						if v['damage'] then
							for j,w in pairs(v['damage']) do
								if w[1] == 'mult' then
									weaponDamage = weaponDamage * w[2]
								elseif w[1] == 'add' then
									weaponDamage = weaponDamage + w[2]
								end
							end
						end
						if v['penetration'] then
							for j,w in pairs(v['penetration']) do
								if w[1] == 'mult' then
									weaponPenetration = weaponPenetration * w[2]
								elseif w[1] == 'add' then
									weaponPenetration = weaponPenetration + w[2]
								end
							end
						end
					end
				end
			end
		end
		
		for i,v in pairs(btb_ballistics_upgradeSettings) do
			local upgradePBG = BP_GetUpgradeBlueprint(modID..':'..i)
			if not upgradePBG then
				upgradePBG = BP_GetUpgradeBlueprint(i)
			end
			local shootingEntitySquad = Entity_GetSquad(shootingEntity)
			if Entity_HasUpgrade(shootingEntity, upgradePBG) or (shootingEntitySquad and Squad_HasUpgrade(shootingEntitySquad, upgradePBG)) then
				if v['damage'] then
					for j,w in pairs(v['damage']) do
						if w[1] == 'mult' then
							weaponDamage = weaponDamage * w[2]
						elseif w[1] == 'add' then
							weaponDamage = weaponDamage + w[2]
						end
					end
				end
				if v['penetration'] then
					for j,w in pairs(v['penetration']) do
						if w[1] == 'mult' then
							weaponPenetration = weaponPenetration * w[2]
						elseif w[1] == 'add' then
							weaponPenetration = weaponPenetration + w[2]
						end
					end
				end
			end
		end
	end
	
	for i,v in pairs(btb_ballistics_enemyUpgradeSettings) do
		local upgradePBG = BP_GetUpgradeBlueprint(modID..':'..i)
		if not upgradePBG then upgradePBG = BP_GetUpgradeBlueprint(i) end
		local targetSquad = Entity_GetSquad(target)
		if Entity_HasUpgrade(target, upgradePBG) or (targetSquad and Squad_HasUpgrade(targetSquad, upgradePBG)) then
			if v['damage'] then
				for j,w in pairs(v['damage']) do
					if w[1] == 'mult' then
						weaponDamage = weaponDamage * w[2]
					elseif w[1] == 'add' then
						weaponDamage = weaponDamage + w[2]
					end
				end
			end
			if v['penetration'] then
				for j,w in pairs(v['penetration']) do
					if w[1] == 'mult' then
						weaponPenetration = weaponPenetration * w[2]
					elseif w[1] == 'add' then
						weaponPenetration = weaponPenetration + w[2]
					end
				end
			end
		end
	end
	return weaponDamage, weaponPenetration
end

local function BtB_Ballistics_ProcessVehicleHit(shootingEntity, target, hitPosition, projectileHeading, vehicleSettings, weaponDamage, weaponPenetration)
	local slope, damageMultiplier, vehicleArmor, hitType = BtB_Ballistics_GetHitData(target, projectileHeading, vehicleSettings)
	
	-- Modify base weapon damage for high hitpoint vehicles
	if Entity_GetHealthMax(target) > 400 then
		weaponDamage = weaponDamage * (1 + 0.175 * math.max(0, math.min(1, (Entity_GetHealthMax(target) - 400)/350)) * math.max(0, math.min(1, weaponPenetration/vehicleArmor)))
	end
	
	-- Slope is not as important if penetration value is larger than vehicle armor
	slope = math.min(1, slope + math.max(0, weaponPenetration/vehicleArmor/2 - 1))
	
	-- Apply modifiers for veterancy and entity upgrades
	weaponDamage, weaponPenetration = BtB_Ballistics_ApplyWeaponModifiers(weaponDamage, weaponPenetration, shootingEntity, target)
	
	local penetrationChance = 1000 * math.max(0, weaponPenetration*1.05/vehicleArmor) * (0.9 + slope*0.35)
	
	--CustomDebug.Print('Weapon penetration: '..string.format('%.0f', weaponPenetration))
	--CustomDebug.Print('Vehicle armor: '..string.format('%.0f', vehicleArmor))
	--CustomDebug.Print('Penetration chance: '..string.format('%.1f', penetrationChance/10))
	
	local penetrated = World_GetRand(0, 1000) <= penetrationChance
	if penetrated then
		local appliedDamage = math.ceil(math.min(weaponDamage, math.ceil(weaponDamage) * (slope*0.45 + 0.6) * damageMultiplier) / 5) * 5
		BtB_Ballistics_ApplyDamage(shootingEntity, target, hitPosition, appliedDamage, true, true, hitType, slope)
	end
end
local function BtB_Ballistics_ProcessStandardHit(shootingEntity, target, hitPosition, weaponDamage)
	BtB_Ballistics_ApplyDamage(shootingEntity, target, hitPosition, weaponDamage, false, false, nil, nil)
end

---------------------------------------------------------------------------------------------------------

function BtB_ProjectileLanded(projectile, shootingEntity, target)
	if projectile and target then
		local projectileName = removeModID(BP_GetName(Entity_GetBlueprint(projectile)))
		local weaponSettings = btb_ballistics_settings[projectileName]
		if weaponSettings then
			-- Extra effects for ballistic weaponry
			--if scartype(target) == ST_SCARPOS then
			--	Misc_DoWeaponHitEffectOnPosition(Util_GetRandomPosition(hitPosition, 0.65), BP_GetWeaponBlueprint('panzerschreck_atw_mp'), true)
			--end
			
			local hitPosition = Entity_GetPosition(projectile)
			local originPosition
			if shootingEntity then
				originPosition = Entity_GetPosition(shootingEntity)
			else
				originPosition = Entity_GetPosition(projectile)
			end
			local projectileHeading = Entity_GetHeading(projectile)
			
			if scartype(target) ~= ST_ENTITY then
				target = BtB_Ballistics_FindClosestHitTarget(hitPosition, projectileHeading, shootingEntity)
			end
			if scartype(target) == ST_ENTITY then
				local weaponDamage, weaponPenetration = BtB_Ballistics_GetWeaponStatistics(weaponSettings, originPosition, hitPosition, target)
				local vehicleSettings = btb_ballistics_vehicles[removeModID(BP_GetName(Entity_GetBlueprint(target)))]
				if vehicleSettings then
					Entity_SetProjectileCanExplode(projectile, false)
					BtB_Ballistics_ProcessVehicleHit(shootingEntity, target, hitPosition, projectileHeading, vehicleSettings, weaponDamage, weaponPenetration)
				--else
					--BtB_Ballistics_ProcessStandardHit(shootingEntity, target, hitPosition, weaponDamage)
				end
			end
		end
	end
end
--[[function BtB_ProjectileFired(projectile, shootingEntity)
	CustomDebug.Print('projectile fired')
	if projectile then
		local projectileName = removeModID(BP_GetName(Entity_GetBlueprint(projectile)))
		local weaponSettings = btb_ballistics_settings[projectileName]
		if weaponSettings then
			Entity_SetProjectileCanExplode(projectile, false)
		end
	end
end]]

---------------------------------------------------------------------------------------------------------

local BtB_Ballistics_Squads = {}
local BtB_Ballistics_NextPlayerToScan = 1

local function BtB_Ballistics_ScanPlayer(player)
	local playerIndex = World_GetPlayerIndex(player)
	local playerSquads = Player_GetSquads(player)
	for i=1,SGroup_CountSpawned(playerSquads) do
		local squad = SGroup_GetSpawnedSquadAt(playerSquads, i)
		local squadGameID = Squad_GetGameID(squad)
		if not BtB_Ballistics_Squads[playerIndex][squadGameID] then
			BtB_Ballistics_Squads[playerIndex][squadGameID] = true
			--Rule_AddSquadEvent(BtB_ProjectileFired, squad, GE_ProjectileFired)
			Rule_AddSquadEvent(BtB_ProjectileLanded, squad, GE_ProjectileLanded)
		end
	end
end
function BtB_Ballistics_Event_BuildItemComplete(player, blueprint)
	BtB_Ballistics_ScanPlayer(player)
end
function BtB_Ballistics_ScanNextPlayer()
	local player = World_GetPlayerAt(BtB_Ballistics_NextPlayerToScan)
	BtB_Ballistics_ScanPlayer(player)
	if BtB_Ballistics_NextPlayerToScan == World_GetPlayerCount() then
		BtB_Ballistics_NextPlayerToScan = 1
	else
		BtB_Ballistics_NextPlayerToScan = BtB_Ballistics_NextPlayerToScan + 1
	end
end

--[[function BtB_Ballistics_PreviewRule()
	local s_sg = SGroup_CreateIfNotFound('ballistics_selection')
	local mo_sg = SGroup_CreateIfNotFound('ballistics_mouseover')
	Misc_GetSelectedSquads(s_sg, true)
	if SGroup_Count(s_sg) == 1 then
		local s1 = SGroup_GetSpawnedSquadAt(s_sg, 1)
		local s1Owner = Squad_GetPlayerOwner(s1)
		
		local localPlayer = Game_GetLocalPlayer()
		
		if s1Owner == localPlayer then
			Util_AddMouseoverSquadToSGroup(mo_sg, true)
			if SGroup_Count(mo_sg) == 1 then
				local s2 = SGroup_GetSpawnedSquadAt(mo_sg, 1)
				if Player_GetRelationship(localPlayer, Squad_GetPlayerOwner(s2)) == RT_Enemy then
					local posDiff = 
					
					-- TODO
					
					local angleOfAttack =
						math.acos((-projectileHeading.x*targetHeading.x - projectileHeading.y*targetHeading.y - projectileHeading.z*targetHeading.z)
						/(
							math.sqrt(projectileHeading.x^2 + projectileHeading.y^2 + projectileHeading.z^2)*
							math.sqrt(targetHeading.x^2 + targetHeading.y^2 + targetHeading.z^2))
						)*180/3.14159
					
					dr_text3d('aicontrol_maincontrol', pos.x, pos.y+9, pos.z, string.format('%.2f', angleOfAttack)..'deg', 255, 255, 255)
				end
			end
		end
	end
end]]

function BtB_Ballistics_Init()
	--Rule_AddGlobalEvent(BtB_ProjectileLanded, GE_ProjectileLanded)
	for i=1,World_GetPlayerCount() do
		BtB_Ballistics_Squads[i] = {}
		Rule_AddPlayerEvent(BtB_Ballistics_Event_BuildItemComplete, World_GetPlayerAt(i), GE_BuildItemComplete)
		--Rule_AddPlayerEvent(BtB_Ballistics_Event_SpawnActionComplete, World_GetPlayerAt(i), GE_SpawnActionComplete)
	end
	Rule_AddInterval(BtB_Ballistics_ScanNextPlayer, 2)
	--Rule_Add(BtB_Ballistics_PreviewRule)
end
Scar_AddInit(BtB_Ballistics_Init)
